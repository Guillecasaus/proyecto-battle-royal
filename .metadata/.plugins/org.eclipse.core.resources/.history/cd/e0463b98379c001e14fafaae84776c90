package ProyectoFinalJava;
import java.util.List;

import javax.swing.*;	

public class Menu {
	
public static void turnoMaquina(Partida partidaActual, Integer numJugadorAtacante) {
		
		Integer menuAtaque = (int)(Math.random()*2+1);
		Integer menuPartida = (int)(Math.random()*4+1);
		Integer jugadorAtacado = (int)(Math.random()*partidaActual.jugadoresDisponibles()+1);
		Integer menuHerramientaAtaque = (int)(Math.random()*partidaActual.getListaPersonajes().get(numJugadorAtacante).getListaHerramientas().size()+1);
		Integer damage;
		Integer vida;
		
		System.out.println("paso:  " +  menuPartida  +" "+menuAtaque +" "+ menuHerramientaAtaque +" "+ jugadorAtacado);
		switch (menuPartida) {
		case 1:
			switch (menuAtaque) {
				case 1:
					System.out.println("paso 1 " + numJugadorAtacante);
					damage = partidaActual.obtenerDamage(numJugadorAtacante);
					partidaActual.quitarDamage(partidaActual.devolverPosicionJugador(jugadorAtacado), damage);
					System.out.println("paso 1 " + jugadorAtacado + damage );
					if (partidaActual.devolverVidaPersonaje(partidaActual.devolverPosicionJugador(jugadorAtacado)) <= 0) {
						partidaActual.jugadorEliminado(partidaActual.devolverPosicionJugador(jugadorAtacado));
					}
				break;
				case 2:
					System.out.println("paso 2 " + numJugadorAtacante);
					//partidaActual.getListaPersonajes().get(numJugadorAtacante).mostrarInventarioHerramientas();					
					if (menuHerramientaAtaque <= partidaActual.getListaPersonajes().get(numJugadorAtacante).getListaHerramientas().size() && partidaActual.getListaPersonajes().get(numJugadorAtacante).getListaHerramientas().size() != 0) {
						//Buscar herramienta
						System.out.println("paso 21 " + numJugadorAtacante);
						damage = partidaActual.obtenerDamage(numJugadorAtacante) + partidaActual.getListaPersonajes().get(numJugadorAtacante).getListaHerramientas().get(menuHerramientaAtaque).getBonus();
						partidaActual.getListaPersonajes().get(numJugadorAtacante).controlHerramientaUsos(menuHerramientaAtaque);
						System.out.println("paso 22 " + damage);
					} else {
						System.out.println("paso 23 " + numJugadorAtacante);
						JOptionPane.showMessageDialog(null, "No tiene ninguna herramienta en esta posicion de inventario");
						damage = partidaActual.obtenerDamage(numJugadorAtacante);
						System.out.println("paso 24 " + damage);
						//TODO Volver a inicio
					}
					partidaActual.quitarDamage(partidaActual.devolverPosicionJugador(jugadorAtacado), damage);
					if (partidaActual.devolverVidaPersonaje(partidaActual.devolverPosicionJugador(jugadorAtacado)) <= 0) {
						partidaActual.jugadorEliminado(partidaActual.devolverPosicionJugador(jugadorAtacado));
					}
				break;
			}
		break;
		case 2:
			if (partidaActual.getListaPersonajes().get(numJugadorAtacante).estaEnCD == false) {
				damage = partidaActual.obtenerDamageHabilidad(numJugadorAtacante);
				partidaActual.quitarDamage(partidaActual.devolverPosicionJugador(jugadorAtacado), damage);
				if (partidaActual.devolverVidaPersonaje(partidaActual.devolverPosicionJugador(jugadorAtacado)) <= 0) {
					partidaActual.jugadorEliminado(partidaActual.devolverPosicionJugador(jugadorAtacado));
				}
				partidaActual.getListaPersonajes().get(numJugadorAtacante).estaEnCD = true;
				partidaActual.getListaPersonajes().get(numJugadorAtacante).setCounterCD(partidaActual.getListaPersonajes().get(numJugadorAtacante).getCooldownHabilidad()+1);
			} else {
				//TODO Volver al inicio
				JOptionPane.showMessageDialog(null, "La habilidad no está disponible"); //TODO Poner cuantos turnos faltan 
			}
		break;	
		case 3:
			JOptionPane.showInputDialog("Seleccione herramienta para añadir: \n" + partidaActual.textoHerramientasDisponibles());
		break;	
		case 4:
			vida = partidaActual.obtenerVida(numJugadorAtacante);
			partidaActual.recuperarVida(numJugadorAtacante, vida);
		break;
		
		default:	
			JOptionPane.showMessageDialog(null, "Valor introducido erróneo");
	}
	}
	
	
	public static void crearJugadores(Partida partidaActual) {
		
		Integer numJugadores = 0;
		String nombreMaquina;
		String nombreJugador;
		
		do {
			String tipoJugador = JOptionPane.showInputDialog("1. Mago\n2. Guerrero\n3. Elfo\n4. Generar juagdores máquina");
			
				switch(tipoJugador) {
					case "1":
						nombreJugador = JOptionPane.showInputDialog("Personaje número: " + (numJugadores + 1) + ", Nombre: ");
						PersonajeMago mago = new PersonajeMago(nombreJugador, TipoJugador.humano, numJugadores + 1);							
						partidaActual.nuevoPersonaje(mago);
						mago.asignarHerramienta(new HerramientaBaston("baston"));
					break;	
					case "2":
						nombreJugador = JOptionPane.showInputDialog("Personaje número: " + (numJugadores + 1) + ", Nombre: ");
						PersonajeGuerrero guerrero = new PersonajeGuerrero(nombreJugador, TipoJugador.humano, numJugadores + 1);
						partidaActual.nuevoPersonaje(guerrero);
						guerrero.asignarHerramienta(new HerramientaBaston("baston"));
					break;	
					case "3":
						nombreJugador = JOptionPane.showInputDialog("Personaje número: " + (numJugadores + 1) + ", Nombre: ");
						PersonajeElfo elfo = new PersonajeElfo(nombreJugador, TipoJugador.humano, numJugadores + 1);
						partidaActual.nuevoPersonaje(elfo);
						elfo.asignarHerramienta(new HerramientaBaston("baston"));
					break;
					case "4":
					
						for(int i=numJugadores; i<Partida.NUM_MAX_JUGADORES; i++) {
							nombreMaquina = "jugadorMaquina" + i;
							PersonajeGuerrero guerreroMaquina = new PersonajeGuerrero(nombreMaquina, TipoJugador.maquina, numJugadores + 1);
							partidaActual.nuevoPersonaje(guerreroMaquina);
							guerreroMaquina.asignarHerramienta(new HerramientaBaston("baston"));
							numJugadores++;
						}
						numJugadores = Partida.NUM_MAX_JUGADORES;
						
					break;
					
					default:	
						JOptionPane.showMessageDialog(null, "Valor introducido erróneo");
				}				
			numJugadores++;
		}while((numJugadores < Partida.NUM_MAX_JUGADORES));
	
		partidaActual.mostrarPersonajes();
	
	}
	
	public static void partidaEnCurso(Partida partidaActual) {
		Integer numTurnos = 0;
		Integer numJugadorAtacante;
		Integer jugadorRecuperarVida;
		String menuPartida;
		String menuAtaque;
		String menuHerramientaAtaque;
		Integer damage;
		Integer vida;
		String jugadoresDisponibles;
		Integer jugadorAtacado;
		
		List<Turno> listaTurnos = new ArrayList<Turnos>;
		
		do{
			numJugadorAtacante = numTurnos % partidaActual.jugadoresDisponibles();
			jugadorRecuperarVida = numTurnos % partidaActual.jugadoresDisponibles();
			
			//Crea nuevo objeto turno y va rellenando con información corespondiente
			Turno turnoActual = new Turno(numTurnos);
			turnoActual.setActua(partidaActual.getListaPersonajes().get(numJugadorAtacante).getNombre());
			
			if(partidaActual.esMaquina(numJugadorAtacante) == 1) {
				turnoMaquina(partidaActual, numJugadorAtacante);
			} else {
				menuPartida = JOptionPane.showInputDialog("Turno: " + numTurnos + "\nJugador Numero: " + partidaActual.devolverNumeroJugador(numJugadorAtacante) + "\n1. Atacar \n2. Usar Habilidad Ofensiva \n3 Coger Objeto \n4. Recuperar Vida");
				switch (menuPartida) {
					case "1":
						menuAtaque = JOptionPane.showInputDialog("Turno: " + numTurnos + "\nJugador Numero: " + partidaActual.devolverNumeroJugador(numJugadorAtacante) + "\n1. Ataque Normal \n2. Usar Herramienta");
						switch (menuAtaque) {
							case "1":
								turnoActual.setAccionesTurno(Acciones.atacarNormal);
								jugadoresDisponibles = JOptionPane.showInputDialog("A que jugador quieres atacar: \n" + partidaActual.textoPersonajes());
								jugadorAtacado = Integer.parseInt(jugadoresDisponibles);	
								turnoActual.setAfectado(partidaActual.getListaPersonajes().get(jugadorAtacado).getNombre());
								damage = partidaActual.obtenerDamage(numJugadorAtacante);
								partidaActual.quitarDamage(partidaActual.devolverPosicionJugador(jugadorAtacado), damage);
								if (partidaActual.devolverVidaPersonaje(partidaActual.devolverPosicionJugador(jugadorAtacado)) <= 0) {
									partidaActual.jugadorEliminado(partidaActual.devolverPosicionJugador(jugadorAtacado));
								}
								turnoActual.setExitoso(true);
							break;
							case "2":
								//partidaActual.getListaPersonajes().get(numJugadorAtacante).mostrarInventarioHerramientas();
								turnoActual.setAccionesTurno(Acciones.atacarHerramienta);
								menuHerramientaAtaque = JOptionPane.showInputDialog("Turno: " + numTurnos + "\nJugador Numero: " + partidaActual.devolverNumeroJugador(numJugadorAtacante) + "\n Introduzca numero de la herramienta deseada: \n"+ partidaActual.getListaPersonajes().get(numJugadorAtacante).textoInventarioHerramientas());
								if (Integer.valueOf(menuHerramientaAtaque) <= partidaActual.getListaPersonajes().get(numJugadorAtacante).getListaHerramientas().size() && partidaActual.getListaPersonajes().get(numJugadorAtacante).getListaHerramientas().size() != 0) {
									damage = partidaActual.obtenerDamage(numJugadorAtacante) + partidaActual.getListaPersonajes().get(numJugadorAtacante).getListaHerramientas().get(Integer.valueOf(menuHerramientaAtaque)).getBonus();
									partidaActual.getListaPersonajes().get(numJugadorAtacante).controlHerramientaUsos(Integer.valueOf(menuHerramientaAtaque));
								} else {
									JOptionPane.showMessageDialog(null, "No tiene ninguna herramienta en esta posicion de inventario");
									damage = partidaActual.obtenerDamage(numJugadorAtacante);
									turnoActual.setExitoso(false);
								}
								jugadoresDisponibles = JOptionPane.showInputDialog("A que jugador quieres atacar: \n" + partidaActual.textoPersonajes());
								jugadorAtacado = Integer.parseInt(jugadoresDisponibles);	
								turnoActual.setAfectado(partidaActual.getListaPersonajes().get(jugadorAtacado).getNombre());
								partidaActual.quitarDamage(partidaActual.devolverPosicionJugador(jugadorAtacado), damage);
								turnoActual.setExitoso(true);
								if (partidaActual.devolverVidaPersonaje(partidaActual.devolverPosicionJugador(jugadorAtacado)) <= 0) {
									partidaActual.jugadorEliminado(partidaActual.devolverPosicionJugador(jugadorAtacado));
								}
							break;
							default:
								JOptionPane.showMessageDialog(null, "Opción elegida incorrecta");
								turnoActual.setAccionesTurno(Acciones.ERROR);
								turnoActual.setExitoso(false);
							break;
							}
					break;
					case "2":
						turnoActual.setAccionesTurno(Acciones.HabilidadOfensiva);
						if (partidaActual.getListaPersonajes().get(numJugadorAtacante).estaEnCD == false) {
							jugadoresDisponibles = JOptionPane.showInputDialog("Contra que jugador quieres usar la habilidad: \n" + partidaActual.textoPersonajes());
							jugadorAtacado = Integer.parseInt(jugadoresDisponibles);
							turnoActual.setAfectado(partidaActual.getListaPersonajes().get(jugadorAtacado).getNombre());
							damage = partidaActual.obtenerDamageHabilidad(numJugadorAtacante);
							turnoActual.setExitoso(true);;
							partidaActual.quitarDamage(partidaActual.devolverPosicionJugador(jugadorAtacado), damage);
							if (partidaActual.devolverVidaPersonaje(partidaActual.devolverPosicionJugador(jugadorAtacado)) <= 0) {
								partidaActual.jugadorEliminado(partidaActual.devolverPosicionJugador(jugadorAtacado));
							}
							partidaActual.getListaPersonajes().get(numJugadorAtacante).estaEnCD = true;
							partidaActual.getListaPersonajes().get(numJugadorAtacante).setCounterCD(partidaActual.getListaPersonajes().get(numJugadorAtacante).getCooldownHabilidad()+1);
						} else {
							//TODO Volver al inicio
							JOptionPane.showMessageDialog(null, "La habilidad no está disponible"); //TODO Poner cuantos turnos faltan 
							turnoActual.setExitoso(false);
						}
					break;	
					case "3":
						turnoActual.setAccionesTurno(Acciones.cogerObjeto);
						turnoActual.setAfectado(partidaActual.getListaPersonajes().get(numJugadorAtacante).getNombre());
						if(partidaActual.getListaPersonajes().get(numJugadorAtacante).estaCDHerramienta == false) {
							String herramientaEscoger = JOptionPane.showInputDialog("Seleccione herramienta para añadir: \n" + partidaActual.textoHerramientasDisponibles());
							switch (herramientaEscoger) {
								case "0": 
									partidaActual.getListaPersonajes().get(numJugadorAtacante).asignarHerramienta(new HerramientaBaston("Baston"));
									partidaActual.getListaPersonajes().get(numJugadorAtacante).estaCDHerramienta = true;
									partidaActual.getListaPersonajes().get(numJugadorAtacante).setCounterCDHerramienta(Partida.TURNOS_CD_ESCOGER_HERRAMIENTA+1);
									turnoActual.setExitoso(true);
								break;
								case "1": 
									partidaActual.getListaPersonajes().get(numJugadorAtacante).asignarHerramienta(new HerramientaEspada("Espada"));
									partidaActual.getListaPersonajes().get(numJugadorAtacante).estaCDHerramienta = true;
									partidaActual.getListaPersonajes().get(numJugadorAtacante).setCounterCDHerramienta(Partida.TURNOS_CD_ESCOGER_HERRAMIENTA+1);
									turnoActual.setExitoso(true);
								break;
								case "2": 
									partidaActual.getListaPersonajes().get(numJugadorAtacante).asignarHerramienta(new HerramientaArco("Arco"));
									partidaActual.getListaPersonajes().get(numJugadorAtacante).estaCDHerramienta = true;
									partidaActual.getListaPersonajes().get(numJugadorAtacante).setCounterCDHerramienta(Partida.TURNOS_CD_ESCOGER_HERRAMIENTA+1);
									turnoActual.setExitoso(true);
								break;
								default:
									JOptionPane.showMessageDialog(null, "No existe la herramienta escogida");
									turnoActual.setExitoso(false);
								break;
							}
						} else {
							JOptionPane.showMessageDialog(null, "Aún no puede volver a elegir una herramienta");
							turnoActual.setExitoso(false);
						}
					break;	
					case "4":
						turnoActual.setAccionesTurno(Acciones.recuperarVida);
						turnoActual.setAfectado(partidaActual.getListaPersonajes().get(numJugadorAtacante).getNombre());
						vida = partidaActual.obtenerVida(jugadorRecuperarVida);
						partidaActual.recuperarVida(jugadorRecuperarVida, vida);
						turnoActual.setExitoso(true);
					break;
					
					default:	
						JOptionPane.showMessageDialog(null, "Valor introducido erróneo");
						turnoActual.setAccionesTurno(Acciones.ERROR);
						
					}
			}	
			listaTurnos.add(turnoActual);
			numTurnos ++;
			
			//Jugador que gana la partida 
			if(partidaActual.jugadoresDisponibles() == 1) {
				JOptionPane.showMessageDialog(null, "El jugador: " + partidaActual.devolverNombreJugador(0) + " es el ganador");
				numTurnos = Partida.MAX_TURNOS+1;
			}else {
				//Cambiar valor CD personaje que ha jugado
				partidaActual.getListaPersonajes().get(numJugadorAtacante).controlCD();
				partidaActual.getListaPersonajes().get(numJugadorAtacante).controlCDHerramienta();
				partidaActual.mostrarPersonajes();
			}
			
		//	partidaActual.mostrarPersonajes();
		} while(numTurnos < Partida.MAX_TURNOS);
	
		if(numTurnos == Partida.MAX_TURNOS) {
			partidaActual.calcularGanador();
		}
	}
	
	public static void main(String[] args) {
		
	String menu = JOptionPane.showInputDialog("1. Iniciar Partida\n2. Continuar Partida\n3 Terminar");
	System.out.println("Hello "+ menu);
		
		switch(menu) {
			case "1":
				Partida partidaActiva = new Partida();
				JOptionPane.showMessageDialog(null, "Partida iniciada");
				crearJugadores(partidaActiva);	
				partidaEnCurso(partidaActiva);
			break;	
			case "2":
				JOptionPane.showMessageDialog(null, "Partida reanudada");
			break;	
			case "3":
				JOptionPane.showMessageDialog(null, "Partida terminidada");
			break;	
			
			default:	
				JOptionPane.showMessageDialog(null, "Valor introducido erróneo");
				
		}	
	}
}

